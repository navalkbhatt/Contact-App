name: .NET Core Application CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Server/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Server/**'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './Server/ContactAppApi'
  DOCKER_IMAGE_NAME: 'contact-app-api'
  REGISTRY: ghcr.io

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}/ContactAppApi.sln
      
    - name: Build application
      run: dotnet build ${{ env.PROJECT_PATH }}/ContactAppApi.sln --configuration Release --no-restore
      
    - name: Run unit tests
      run: dotnet test ${{ env.PROJECT_PATH }}/ContactAppApi.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: ${{ env.PROJECT_PATH }}/**/TestResults/
        
    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }}/ContactAppApi/ContactAppApi.csproj --configuration Release --output ./publish --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: published-app
        path: ./publish

  # Security and Code Quality Job
  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Run security scan with DevSkim
      uses: microsoft/DevSkim-Action@v1

    - name: Upload DevSkim results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: devskim-results.sarif

  # Docker Build and Push Job
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, code-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.PROJECT_PATH }}
        file: ${{ env.PROJECT_PATH }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        # Add your staging deployment commands here
        # Example: kubectl, docker-compose, or API calls to your hosting platform
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        # Add your smoke test commands here
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "Staging deployment completed with status: ${{ job.status }}"

  # Deploy to Production Environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        # Add your production deployment commands here
        
    - name: Run health checks
      run: |
        echo "Running health checks against production environment..."
        # Add your health check commands here
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "Production deployment completed with status: ${{ job.status }}"
        # Add notification to Slack, Teams, or email here